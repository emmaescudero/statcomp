jan1= filter(flights, month == 1, day == 1)
library(tidyverse)
library(gapminder)
library(nycflights13)
library(Lahman)
flights
jan1= filter(flights, month == 1, day == 1)
jan1
jan1= filter(flights, month == 1 & day == 1)
jan1
class(flights)
flightsdf= as.data.frame(flights)
class(flightsdf)
filter(flights, month == 1 & day == 1)
flightsm= as.matrix(flights[,1:3])
filter(flightsm, month == 1 & day == 1)
sel= (flights[,'month']==1) & (flightsm[,'day']==1)
flightsel= flightsm[sel,]
flightsel[1:5,1:3]
# Let x be Mary's age. We don't know how old she is.
x= NA
x == 20 #is Mary 20?
# Let y be John's age. We don't know how old he is.
y= NA
x == y # Are John and Mary the same age?
df= tibble(x = c(1, NA, 3))
filter(df, is.na(x) | x > 1)
arrange(flights, year, month, day)
arrange(flights, desc(year), desc(month), desc(day))
o= order(flights$year, flights$month, flights$day, decreasing=TRUE)
flights[o,]
select(flights, year, month, day, dep_delay)
select(flights, contains("delay"))
select(flights, time_hour, air_time, everything())
rename(flights, deptime = dep_time)
flights_sml= select(flights, year:day, contains("delay"), distance, air_time)
mutate(flights_sml, gain=dep_delay - arr_delay, speed = distance / air_time * 60)
transmute(flights, gain = dep_delay - arr_delay, hours = air_time / 60)
uaflight= (flights$carrier == 'UA')
finedep= finearr= double(nrow(flights))
finedep[uaflight]= 75 * flights$dep_delay[uaflight]/60
finedep[!uaflight]= 100 * flights$dep_delay[!uaflight]/60
finedep[finedep<0]= 0
aaflight= flights$carrier == 'AA'
finearr[aaflight]= 150 * flights$arr_delay[aaflight]/60
finearr[!aaflight] = 200 * flights$arr_delay[!aaflight]/60
finearr[finearr<0]= 0
flights$fine= finedep + finearr
select(flights, carrier, dep_delay, arr_delay, fine)
aggregate(dep_delay ~ year + month + day, data=flights, FUN=mean, na.rm=TRUE)
<<<<<<< Updated upstream
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
starwars
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
install.packages("dplyr")
install.packages("gapminder")
install.packages("gganimate")
install.packages("ggplot2")
install.packages("fivethirtyeight")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("rstudio-education/dsbox")
install.packages("devtools")
library(tidyverse)  #also loads ggplot2
library(dplyr)
library(dsbox)
library(fivethirtyeight)
library(gapminder)
library(gganimate)
ggplot(data= mydata) +
<GEOMFUNCTION>(mapping = aes(<MAPPINGS>))
ggplot(data = starwars) +
geom_point(mapping = aes(x = height, y = mass))
ggplot(data = starwars) +
geom_point(mapping = aes(x = height, y = mass)) +
geom_smooth(mapping = aes(x = height, y=mass), method='lm')
ggplot(data = starwars) +
geom_point(mapping = aes(x = height, y = mass)) +
geom_smooth(mapping = aes(x = height, y=mass), method='lm', se=FALSE) #remove standard error
ggplot(data = starwars, mapping = aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm', se=FALSE)
mycols= c('fair','white','light','brown','dark')
starwars$human_skincolor= ifelse(starwars$skin_color %in% mycols, 'human', 'non-human')
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point(aes(color= human_skincolor, shape= human_skincolor)) +
geom_smooth(method='lm', se=FALSE)
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~ human_skincolor)
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~ human_skincolor)
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~ human_skincolor, scale="free_y")
ggplot(mydata, mapping=aes(<MAPPINGS>)) +
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor)) +
geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE)
mylab= 'Human character?'
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor)) +
geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color=mylab, shape=mylab, linetype=mylab) +
theme(legend.position = c(0.1,0.7))
mylab= 'Human character?'
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor)) +
geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color=mylab, shape=mylab, linetype=mylab) +
theme(legend.position = c(0.1,0.7)) +
coord_cartesian(ylim = c(0, 200))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(color='black') +
geom_smooth(method='lm', color='blue')
library(fivethirtyeight)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
round(cor(hc[,-1], use='complete.obs'),3)
hc$ginic= cut(hc$gini, breaks=c(0,0.43,0.45,0.47,1))
levels(hc$ginic)= c('Gini <= 0.43','0.43 < Gini <= 0.45','0.45 < Gini <= 0.47','Gini > 0.47')
hc$hsc= cut(hc$hs, breaks=c(0,0.83,0.86,0.9,1))
levels(hc$hsc)= c('hs <= 0.83', '0.83 < hs <= 0.86', '0.86 < hs <= 0.9', 'hs > 0.9')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
ggplot(starwars, aes(x=human_skincolor, y=height)) +
geom_point()
ggplot(starwars, aes(x=human_skincolor, y=height)) +
geom_point() +
geom_violin()
ggplot(starwars, aes(x=height, fill=human_skincolor)) +
geom_histogram(alpha=0.2, color='black')  #alpha is the color transparency
ggplot(starwars, aes(x=height, color=human_skincolor)) +
geom_freqpoly()
ggplot(starwars, aes(x=height, color=human_skincolor)) +
geom_density()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_bin2d() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds) +
geom_bar(aes(x = cut))
ggplot(diamonds) +
geom_bar(aes(x = cut, y=after_stat(prop), group=1))
ggplot(diamonds) +
geom_bar(aes(x = cut, y=after_stat(prop), group=1)) +
scale_y_continuous(labels = scales::percent_format()) +
labs(x='Diamond cut', y='Percentage') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
ggplot(diamonds) +
geom_bar(aes(x = cut, fill = clarity))
ggplot(diamonds) +
geom_bar(aes(x = cut, fill = clarity), position = "dodge")
df= data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
df
#| output-location: slide
ggplot(data=df, aes(x=dose, y=len, group=supp, color=supp)) +
geom_line()+
geom_point()
ggsave("mtcars.pdf")
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
png("mtcars.png")
png("mtcars.pdf")
print(p)
dev.off()
p= ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor))
#you can call ggsave() here
p + geom_smooth(aes(linetype= human_skincolor), method='lm', se=FALSE)
#call ggsave() again to save in a different file
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor))
p= ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor))
p + geom_smooth(aes(linetype= human_skincolor), method='lm', se=FALSE)
ggsave(p)
ggsave("p", plot=last_plot())
ggplot(mydata, ...) #code to produce the animation
p= ggplot(mydata, ...)  #code to produce the animation
gapminder
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=continent, size=pop), alpha = 0.7, show.legend = TRUE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x='GDP per capita', y='Life expectancy')
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=continent, size=pop), alpha = 0.7, show.legend = TRUE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
#we add gganimate layers below
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy')
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=continent, size=pop), alpha = 0.7, show.legend = TRUE) +
scale_size(range = c(2, 12)) +
scale_x_log10() + transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy')
ggplot(airquality, aes(Day, Temp)) +
geom_point(colour = 'steelblue') +
transition_states(Month) +
labs(title='Month: {closest_state}')
install.packages("gganimate")
library(gganimate)
ggplot(airquality, aes(Day, Temp)) +
geom_point(colour = 'steelblue') +
transition_states(Month) +
labs(title='Month: {closest_state}')
gini= as_tibble(read.csv("~/github/statcomp/datasets/gini.csv"))
![](figs/airquality_byday.gif)
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop.csv"))
gini= as_tibble(read.csv("~//Users/emmaescudero/Desktop.csv"))
gini= as_tibble(read.csv("~/Users/emmaescudero/Desktop.csv"))
gini= as_tibble(read.csv("~/Users/emmaescudero/Desktop/gini.csv"))
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
ggplot(data=gini, aes(x=Gini, y=time, group=supp, color=supp)) +
geom_line()+
geom_point()
supp
ggplot(data=gini, aes(x=Gini, y=time, group=supp, color=country_colors)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Gini, y=time, color=country_colors)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Gini, y=time, group=Entity, color=Entity)) +
geom_line()+
geom_point()
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
ggplot(data=gini, aes(x=Gini, y=time, group=Entity, color=Entity)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Year, y=gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()+
transition_reveal(Year)
animate(a)
a <- ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()+
transition_reveal(Year)
animate(a)
animate(a)
install.packages("gifski")
library(gifski)
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()
a <- ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()+
transition_reveal(Year)
animate(a)
=======
>>>>>>> Stashed changes
