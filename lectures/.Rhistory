xbar= aggregate(time ~ group, data=data, FUN=mean)
ans= sum((xbar$time - mean(xbar$time))^2)
return(ans)
}
tobs= tstat(rotarod)
tobs
B= 2000; n= nrow(rotarod)
t0= double(B)
for (b in 1:B) {
groupperm= rotarod$group[sample(1:n, size=n, replace=FALSE)]
dataperm= data.frame(time=rotarod$time, group=groupperm)
t0[b]= tstat(dataperm)
}
pvalue= mean(t0 >= tobs) #proportion of t0's >= tobs
pvalue
hist(t0,main='',xlab='Test statistic'); abline(v= tobs, col='blue')
#based on asymptotic theory
independence_test(time ~ group, data=rotarod, teststat="quadratic", distribution="asymptotic")
#permutation-based
independence_test(time ~ group, data=rotarod, teststat="quadratic", distribution="approximate")
states= as.data.frame(state.x77)
sel= c('Population','Illiteracy','Income','Frost')
states[,sel]= scale(states[,sel])  #standardize to zero mean, unit variance
fit1= lm(Murder~Population + Illiteracy+Income+Frost, data=states)
coefSummary(fit1)
fit2= lmp(Murder~Population + Illiteracy+Income+Frost, data=states)
summary(fit2)
#Residual permutation test for a single variable in linear regression
#Input
# - y: outcome
# - x1: covariate of interest
# - x2: other covariates
# - B: number of residual permutations to consider
# Output: estimated coefficients for x1 in the B permutations
lmResPerm.onevar= function(y, x1, x2, B=5000) {
if (!is.matrix(x2)) x2= as.matrix(x2)
fit= lm(x1 ~ x2)
x1hat= predict(fit)
e= residuals(fit)
bperm= double(B)
for (b in 1:B) {
eperm= e[sample(1:length(e), size=length(e), replace=FALSE)]
x1tilde= x1hat + eperm
fitperm= lm(y ~ x1tilde + x2)
bperm[b]= coef(fitperm)['x1tilde']
}
return(bperm)
}
y= states$Murder; x1= states$Population; x2= states[,c('Illiteracy','Income','Frost')]
bperm= lmResPerm.onevar(y, x1, x2, B=5000)
bobs= coef(fit1)['Population']
pvalue= mean(abs(bperm) > abs(bobs))
pvalue
x= cbind(Population=x1, x2)
fit1.resperm= lmResPerm(y, x, B=5000)
fit1.resperm$pvalue
summary(fit2)$coef
library(tidyverse)
library(boot)
library(fivethirtyeight)
library(lmPerm)
source("~/github/statcomp/code/routines.R")
library(tidyverse)
library(boot)
library(fivethirtyeight)
library(lmPerm)
source("/Users/emmaescudero/Documents/modern/code/routines.R")
=======
ggplot(coef_gm, aes(x=R2)) + geom_histogram()
filter(coef_gm, R2 < 0.5) %>% dplyr::select(country, continent, R2)
```
source("/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #recall to set path to directory
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(fivethirtyeight)
>>>>>>> 2bd5068f5bca1f49ebc44833bcf676d953e4949c
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
<<<<<<< HEAD
fit= lm(hatecrimes_fbi ~ votes_trump + gini + hs, data=hc)
set.seed(12345) #setting random seed generator
B= 2000; n= nrow(baseball) #we ask for 2000 subsamples
th= double(B) #the output
for (b in 1:B) {
idx= sample(1:n, size=n, replace=TRUE) #use the sample instruction to take entries from this vector (1:n) with all of the numbers, n of them and we do a replacement. So idx will be the indexes of the samples.
th[b]= bat.avg(baseball, indices=idx) #we call again the function. The first argument is the same but now we resample the indexes.
}
th[b]
th= tibble(th)
ggplot(th, aes(x=th)) + geom_histogram(aes(y= ..density..)) + stat_overlay_normal_density(linetype='dashed')
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
source("/Users/emmaescudero/Documents/modern/code/routines.R")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(tidyverse)
library(boot)
library(fivethirtyeight)
library(lmPerm)
source("/Users/emmaescudero/Documents/modern/code/routines.R")
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi))
fit= lm(hatecrimes_fbi ~ votes_trump + gini + hs, data=hc)
View(hate_crimes)
b= function(hate_crimes, indices=1:nrow(hate_crimes), formula) {
fit= lm(formula, hate_crimes=hate_crimes[indices,])
return(coef(fit))
}
round(b(hate_crimes, formula=f), 3)
b= function(hate_crimes, indices=1:nrow(hate_crimes), formula) {
fit= lm(formula, hate_crimes=hate_crimes[indices,])
return(coef(fit))
}
round(b(hate_crimes, formula=fit), 3)
View(hc)
b= function(hc, indices=1:nrow(hate_crimes), fit) {
fit= lm(fit, hc=hc[indices,])
return(coef(fit))
}
round(b(hc, formula=fit), 3)
b
b= function(hc, indices=1:nrow(hc), fit) {
fit= lm(fit, data = hc[indices,])
return(coef(fit))
}
round(b(hc,fit), 3)
b= function(hc, indices=1:nrow(hc), formula) {
fit= lm(fit, data = hc[indices,])
return(coef(fit))
}
round(b(hc,formula = fit), 3)
fit= lm(hatecrimes_fbi ~ votes_trump + gini + hs, data=hc)
b= function(hc, indices=1:nrow(hc), formula=fit) {
fit= lm(fit, data = hc[indices,])
return(coef(fit))
}
round(b(hc,formula = fit), 3)
fit= lm(hatecrimes_fbi ~ votes_trump + gini + hs, data=hc)
f <- hatecrimes_fbi ~ votes_trump + gini + hs
fit= lm(hatecrimes_fbi ~ votes_trump + gini + hs, data=hc)
f <- formula(hatecrimes_fbi ~ votes_trump + gini + hs)
b= function(hc, indices=1:nrow(hc), formula=f) {
fit= lm(fit, data = hc[indices,])
return(coef(fit))
}
round(b(hc,formula = f), 3)
b
b.fit= boot(hc, statistic=b, R=2000, formula=f)
dim(b.fit$t)
round(b.fit$t,3)[1:5,]
round(b.fit$t0, 3)
fit= lm(hatecrimes_fbi ~ votes_trump + gini + hs, data=hc)
f = formula(hatecrimes_fbi ~ votes_trump + gini + hs)
b= function(hc, indices=1:nrow(hc), formula=f) {
fit= lm(fit, data = hc[indices,])
return(coef(fit))
}
round(b(hc,formula = f), 3)
b.fit= boot(hc, statistic=b, R=2000, formula=f)
dim(b.fit$t)
round(b.fit$t,3)[1:5,]
round(b.fit$t0, 3)
b.boot= as_tibble(b.fit$t)
b.ci= map_df(b.boot, quantile, probs=c(0.025,0.975), na.rm=TRUE)
b.ci= cbind(varname= names(b.boot), b.ci)
yvals= 1:length(coef(fit))
ci= cbind(b.ci, confint(fit), y.ols=yvals, y.boot=yvals+.1)
names(ci)= c('varname','low.boot','high.boot','low.ols','high.ols','y.ols','y.boot')
ggplot(ci) +
geom_segment(aes(x=low.ols,xend=high.ols,y=y.ols,yend=y.ols)) +
geom_segment(aes(x=low.boot,xend=high.boot,y=y.boot,yend=y.boot), color='blue') +
geom_text(aes(x=low.ols, y=y.ols, label=varname), nudge_y = 0.3) +
labs(x='Confidence interval', y='') +
theme(axis.text.y=element_blank(),  axis.ticks.y=element_blank())
yvals= 1:length(coef(fit))
ci= cbind(b.ci, confint(fit), y.ols=yvals, y.boot=yvals+.1)
names(ci)= c('varname','low.boot','high.boot','low.ols','high.ols','y.ols','y.boot')
ggplot(ci) +
geom_segment(aes(x=low.ols,xend=high.ols,y=y.ols,yend=y.ols)) +
geom_segment(aes(x=low.boot,xend=high.boot,y=y.boot,yend=y.boot), color='light blue') +
geom_text(aes(x=low.ols, y=y.ols, label=varname), nudge_y = 0.3) +
labs(x='Confidence interval', y='') +
theme(axis.text.y=element_blank(),  axis.ticks.y=element_blank())
yvals= 1:length(coef(fit))
ci= cbind(b.ci, confint(fit), y.ols=yvals, y.boot=yvals+.1)
names(ci)= c('varname','low.boot','high.boot','low.ols','high.ols','y.ols','y.boot')
ggplot(ci) +
geom_segment(aes(x=low.ols,xend=high.ols,y=y.ols,yend=y.ols)) +
geom_segment(aes(x=low.boot,xend=high.boot,y=y.boot,yend=y.boot), color='light pink') +
geom_text(aes(x=low.ols, y=y.ols, label=varname), nudge_y = 0.3) +
labs(x='Confidence interval', y='') +
theme(axis.text.y=element_blank(),  axis.ticks.y=element_blank())
yvals= 1:length(coef(fit))
ci= cbind(b.ci, confint(fit), y.ols=yvals, y.boot=yvals+.1)
names(ci)= c('varname','low.boot','high.boot','low.ols','high.ols','y.ols','y.boot')
ggplot(ci) +
geom_segment(aes(x=low.ols,xend=high.ols,y=y.ols,yend=y.ols)) +
geom_segment(aes(x=low.boot,xend=high.boot,y=y.boot,yend=y.boot), color='light pink') +
geom_text(aes(x=low.ols, y=y.ols, label=c("Intercept", "Votes Trump", "Gini", "Highschool")), nudge_y = 0.3) +
labs(x='Confidence interval', y='') +
theme(axis.text.y=element_blank(),  axis.ticks.y=element_blank())
yvals= 1:length(coef(fit))
ci= cbind(b.ci, confint(fit), y.ols=yvals, y.boot=yvals+.1)
names(ci)= c('varname','low.boot','high.boot','low.ols','high.ols','y.ols','y.boot')
ggplot(ci) +
geom_segment(aes(x=low.ols,xend=high.ols,y=y.ols,yend=y.ols)) +
geom_segment(aes(x=low.boot,xend=high.boot,y=y.boot,yend=y.boot), color='light pink') +
geom_text(aes(x=low.ols, y=y.ols, label=c("Intercept", "Votes Trump", "Gini", "Highschool")), nudge_y = 0.3) +
labs(x='Confidence interval', y="Distribution Bootstrap vs lm") +
theme(axis.text.y=element_blank(),  axis.ticks.y=element_blank())
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
ag <- aggregate(dep_delay ~ year + month + day, data=flights, FUN=mean, na.rm=TRUE)
install.packages("skimr")
=======
View(hc)
lmfit <- lm(hatecrimes_fbi ~ votes_trump + gini + hs, data = hc)
lmfit
confint(lmfit, level = 0.95)
coefSummary(lmfit)
coefSummary(lmfit)
library(fivethirtyeight)
library(coefplot)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
coefSummary(lmfit)
res <- lmfit$assign
res
res <- lmfit$residuals
res
pred <- predict(lmfit)
ggplot(diamonds2, aes(pred, res)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(hc, aes(pred, res)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(hc, aes(x=pred, y=res)) +
geom_boxplot(mapping = aes(group = cut_width(pred2, 0.2))) +
labs(x='Model prediction', y='Residuals')
ggplot(hc, aes(x=pred, y=res)) +
geom_boxplot(mapping = aes(group = cut_width(pred, 0.2))) +
labs(x='Model prediction', y='Residuals')
library(ggpubr)
ggplot(hc, aes(x=res)) +
geom_histogram(aes(y= ..density..)) +
stat_overlay_normal_density(linetype = "dashed") +
labs(x='Residuals')
library(fivethirtyeight)
library(coefplot)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
library(fivethirtyeight)
library(coefplot)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
coefSummary(lmfit)
coefSummary(lmfit)
>>>>>>> 2bd5068f5bca1f49ebc44833bcf676d953e4949c
install.packages("openintro")
library(tidyverse)
library(hdm)
cps2012= as_tibble(cps2012)
cps2012= mutate(cps2012, marital= factor(1 * widowed + 2 * divorced + 3 * separated + 4 * nevermarried))
levels(cps2012$marital)= c('Married','Widowed','Divorced','Separated','NeverMarried')
cps2012= mutate(cps2012, lwage= log2(exp(cps2012$lnw))) #compute log2-wage
cps2012= mutate(cps2012, gender= factor(female))
levels(cps2012$gender)= c('male','female')
cps2012= mutate(cps2012, educ= factor(1 * hsd08 + 1 * hsd911 + 2 * hsg + 3 * cg + 4 * ad))
levels(cps2012$educ)= c('SomeCollege','HighSDiploma','HighSGrad','College','Advanced')
cps2012= rename(cps2012, experience=exp1)
cps2012= select(cps2012, lwage, gender, marital, educ, experience)
ggplot(data=cps2012, mapping = aes(x=gender, y=lwage)) +
geom_point(aes(color=gender)) +
geom_smooth(aes(color=gender, shape=gender)) +
geom_boxplot() +
labs(title = "Salaries vs Gender", x="Gender", y="Salaries")
ggplot(data = cps2012, mapping=aes(x=educ, y=lwage)) +
geom_point() +
geom_smooth(method = "lm") +
geom_boxplot() +
labs(title = "Salaries vs Education", x="Education", y="Salaries")
ggplot(cps2012, mapping = aes(x=experience, y=lwage)) +
geom_point() +
geom_smooth(method = "lm",color="pink", se=F )
morethanfiveexperience <- filter(cps2012, experience > 5)
cps2012_ <- cps2012 %>%
select(lwage, gender, marital, experience) %>%
filter(experience > 5)
married <- cps2012_ %>%
filter(marital == "Married")
nevermarried <- cps2012_ %>%
filter(marital == "NeverMarried")
divorced <- cps2012_ %>%
filter(marital == "Divorced")
married_ <- group_by(married, gender)
summarise(married_, meansalary=mean(lwage,na.rm=TRUE))
nevermarried_ <- group_by(nevermarried, gender)
summarise(nevermarried_, meansalary=mean(lwage, na.rm=TRUE))
divorced_ <- group_by(divorced, gender)
summarise(divorced_, meansalary=mean(lwage, na.rm=TRUE))
salmale <- cps2012 %>%
filter(gender == "male")
salfemale <- cps2012 %>%
filter(gender == "female")
source("/Users/emmaescudero/Documents/modern/code/routines.r")
lmfit <- lm(lwage ~ gender, educ, data=cps2012)
confint(lmfit, level = 0.95)
coefSummary(lmfit)
cps2012$pred <- predict(lmfit)
cps2012$res <- residuals(lmfit)
ggplot(cps2012, aes(x=pred, y=res)) +
geom_point() +
geom_smooth() +
geom_abline(slope = 0, intercept = 1)
ggplot(cps2012, mapping = aes(x=experience, y=lwage)) +
geom_point() +
geom_smooth(color="pink") #don't select the method of a linear model.
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(tidyverse)
library(boot)
library(coefplot)
library(modelr)
library(openintro)
source('../code/routines.R')
source("/Users/emmaescudero/Documents/modern/code/routines.r")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(tidyverse)
library(boot)
library(coefplot)
library(modelr)
library(openintro)
source("/Users/emmaescudero/Documents/modern/code/routines.r")
email
ggplot(email, aes(x=num_char)) + geom_density(aes(color=spam))
ggplot(email) + geom_bar(aes(x=spam, y=after_stat(prop), group=1)) + facet_wrap(~ re_subj)
fit= glm(spam ~ num_char + re_subj, data=email, family=binomial())
coefSummary(fit)
mygrid= data_grid(email, num_char, re_subj, .model=fit)
fitpred= add_predictions(mygrid, model=fit)
fitpred$predprob= 1/(1+ exp(-fitpred$pred))
ggplot(fitpred, aes(x=num_char,y=predprob,color=re_subj)) + geom_line()
y= ifelse(email$spam=='1',1,0)
x2= ifelse(email$re_subj=='1',1,0)
X= cbind(intercept=1, num_char=email$num_char, re_subj=x2)
ytX= matrix(y,nrow=1) %*% X
flogreg= function(beta, y, X, ytX, logscale=TRUE) {
if (missing(ytX)) ytX = matrix(y,nrow=1) %*% X
if (any(beta != 0)) {
Xbeta= as.vector(X %*% matrix(beta,ncol=1))
ans= -sum(ytX * beta) + sum(log(1+exp(Xbeta)))
} else {
n= length(y)
ans= n * log(2)
}
if (!logscale) ans= exp(ans)
return(ans)
}
opt1= nlm(flogreg, rep(0,3), y=y, X=X, ytX=ytX, hessian=TRUE, print.level=2)
opt1$gradient #should be 0
thhat= opt1$estimate
H= opt1$hessian
se= sqrt(diag(solve(H)))
round(cbind(thhat, se, summary(fit)$coef[,1:2]),3)
fHH= as_tibble(read.table("../datasets/fHH1.txt", header=TRUE))
fHH= as_tibble(read.table("/Users/emmaescudero/Documents/modern/datasets", header=TRUE))
fHH= as_tibble(read.table("/Users/emmaescudero/Documents/modern/datasets.fHH1.txt", header=TRUE))
fHH= as_tibble(read.table("/Users/emmaescudero/Documents/modern/datasets/fHH1", header=TRUE))
fHH= as_tibble(read.table("/Users/emmaescudero/Documents/modern/datasets/fHH1.txt", header=TRUE))
fHH
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(tidyverse)
library(boot)
library(coefplot)
library(modelr)
library(openintro)
source("/Users/emmaescudero/Documents/modern/code/routines.r")
email
ggplot(email, aes(x=num_char)) + geom_density(aes(color=spam))
ggplot(email) + geom_bar(aes(x=spam, y=after_stat(prop), group=1)) + facet_wrap(~ re_subj)
fit= glm(spam ~ num_char + re_subj, data=email, family=binomial())
coefSummary(fit)
mygrid= data_grid(email, num_char, re_subj, .model=fit)
fitpred= add_predictions(mygrid, model=fit)
fitpred$predprob= 1/(1+ exp(-fitpred$pred))
ggplot(fitpred, aes(x=num_char,y=predprob,color=re_subj)) + geom_line()
y= ifelse(email$spam=='1',1,0)
x2= ifelse(email$re_subj=='1',1,0)
X= cbind(intercept=1, num_char=email$num_char, re_subj=x2)
ytX= matrix(y,nrow=1) %*% X
flogreg= function(beta, y, X, ytX, logscale=TRUE) {
if (missing(ytX)) ytX = matrix(y,nrow=1) %*% X
if (any(beta != 0)) {
Xbeta= as.vector(X %*% matrix(beta,ncol=1))
ans= -sum(ytX * beta) + sum(log(1+exp(Xbeta)))
} else {
n= length(y)
ans= n * log(2)
}
if (!logscale) ans= exp(ans)
return(ans)
}
opt1= nlm(flogreg, rep(0,3), y=y, X=X, ytX=ytX, hessian=TRUE, print.level=2)
opt1$gradient #should be 0
thhat= opt1$estimate
H= opt1$hessian
se= sqrt(diag(solve(H)))
round(cbind(thhat, se, summary(fit)$coef[,1:2]),3)
fHH= as_tibble(read.table("/Users/emmaescudero/Documents/modern/datasets/fHH1.txt", header=TRUE))
fHH
ggplot(fHH, aes(x=total)) + geom_bar()
ggplot(fHH, aes(x=age, y=total)) + geom_point()
ggplot(fHH, aes(x=age, y=total)) + geom_point(position="jitter") + geom_smooth()
ggplot(fHH, aes(x=age,y=total, color=location)) + geom_point(position="jitter") + geom_smooth()
ggplot(fHH, aes(x=age,y=total, color=roof)) + geom_point(position="jitter") + geom_smooth()
fHH= mutate(fHH, aged= cut_width(age, 5), age2= age^2)
fHH$roof= recode(fHH$roof, `Predominantly Strong Material`="Strong", `Predominantly Light/Salvaged Material`="Light")
fHH
fit= glm(total ~ location + roof + aged, data=fHH, family=poisson())
summary(fit)$coef
fit2= glm(total ~ location + roof + age + age2, data=fHH, family=poisson())
summary(fit2)$coef
#| code-fold: true
mygrid= data_grid(fHH, aged, location, .model=fit)
fitpred= add_predictions(mygrid, model=fit)
fitpred$predmean= exp(fitpred$pred)
ggplot(fitpred, aes(x=aged,y=predmean,group=location, color=location)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x='Age of household head', y='Expected number of people in household')
#| code-fold: true
mygrid= data_grid(fHH, aged, roof, .model=fit)
fitpred= add_predictions(mygrid, model=fit)
fitpred$predmean= exp(fitpred$pred)
ggplot(fitpred, aes(x=aged,y=predmean,group=roof, color=roof)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x='Age of household head', y='Expected number of people in household')
#| code-fold: true
mygrid= data_grid(fHH, age, location, .model=fit2)
mygrid= mutate(mygrid, age2= age^2)
fitpred= add_predictions(mygrid, model=fit2)
fitpred$predmean= exp(fitpred$pred)
ggplot(fitpred, aes(x=age,y=predmean,group=location,color=location)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x='Age of household head', y='Expected number of people in household') +
ylim(0,5)
#| code-fold: true
mygrid= data_grid(fHH, age, roof, .model=fit2)
mygrid= mutate(mygrid, age2= age^2)
fitpred= add_predictions(mygrid, model=fit2)
fitpred$predmean= exp(fitpred$pred)
ggplot(fitpred, aes(x=age,y=predmean,group=roof,color=roof)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x='Age of household head', y='Expected number of people in household') +
ylim(0,5)
ggplot(fHH, aes(x=age,y=total, color=roof)) + geom_point(position="jitter") + geom_smooth()
fHHint= mutate(fHH, strong= (roof=='Strong'), agestrong= age*(roof=='Strong'), age2strong= age2*(roof=='Strong'))
fit4= glm(total ~ strong + age + age2 + agestrong + age2strong, data=fHHint, family=poisson())
mygrid= data_grid(fHHint, strong, age)
mygrid= mutate(mygrid, age2= age^2, agestrong= age*strong, age2strong= age^2 * strong)
mygrid= add_predictions(mygrid, model=fit4) %>% mutate(predmean= exp(pred))
ggplot(mygrid, aes(x=age,y=predmean,group=strong,color=strong)) +
geom_line() +
labs(x='Age of household head', y='Expected number of people in household') +
ylim(0,5)
fHHres= mutate(fHH, pred= predict(fit2), resdev= residuals(fit2, type='deviance'), respearson= residuals(fit2, type='pearson'))
ggplot(fHHres, aes(pred, resdev)) + geom_point() + geom_smooth() + labs(x='Predicted (log)', y='Deviance residual')
ggplot(fHHres, aes(pred, respearson)) + geom_point() + geom_smooth() + labs(x='Predicted (log)', y='Pearson residual')
fHHres= mutate(fHHres, predcut= cut_number(pred, 10))
ggplot(fHHres, aes(x=predcut, y=respearson)) + geom_boxplot()
fit2q= glm(total ~ location + roof + age + age2, data=fHH, family=quasipoisson)
summary(fit2)
summary(fit2q)
multiplot(fit2, fit2q)
f= formula(total ~ location + roof + age + age2)
fit2.bootci= bootGLM(fHH, formula=f, family=poisson(), level=0.95)
allci= round(cbind(fit2.bootci[,-1], confint(fit2), confint(fit2q)), 3)
names(allci)= paste(c('Boot','Boot','MLE','MLE','Q','Q'), names(allci), sep='')
allci
crime= as_tibble(read.table("../datasets/campuscrime.txt", header=TRUE, sep="\t"))
crime= as_tibble(read.table("/Users/emmaescudero/Documents/modern/datasets/campuscrime.txt", header=TRUE, sep="\t"))
crime
ggplot(email) + geom_bar(aes(x=spam, y=after_stat(prop), group=1)) + facet_wrap(~ re_subj)
fit= glm(spam ~ num_char + re_subj, data=email, family=binomial())
coefSummary(fit)
