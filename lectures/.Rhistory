select(flights, contains("delay"))
select(flights, time_hour, air_time, everything())
rename(flights, deptime = dep_time)
flights_sml= select(flights, year:day, contains("delay"), distance, air_time)
mutate(flights_sml, gain=dep_delay - arr_delay, speed = distance / air_time * 60)
transmute(flights, gain = dep_delay - arr_delay, hours = air_time / 60)
uaflight= (flights$carrier == 'UA')
finedep= finearr= double(nrow(flights))
finedep[uaflight]= 75 * flights$dep_delay[uaflight]/60
finedep[!uaflight]= 100 * flights$dep_delay[!uaflight]/60
finedep[finedep<0]= 0
aaflight= flights$carrier == 'AA'
finearr[aaflight]= 150 * flights$arr_delay[aaflight]/60
finearr[!aaflight] = 200 * flights$arr_delay[!aaflight]/60
finearr[finearr<0]= 0
flights$fine= finedep + finearr
select(flights, carrier, dep_delay, arr_delay, fine)
aggregate(dep_delay ~ year + month + day, data=flights, FUN=mean, na.rm=TRUE)
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
starwars
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
install.packages("dplyr")
install.packages("gapminder")
install.packages("gganimate")
install.packages("ggplot2")
install.packages("fivethirtyeight")
install.packages("tidyverse")
install.packages("devtools")
devtools::install_github("rstudio-education/dsbox")
install.packages("devtools")
library(tidyverse)  #also loads ggplot2
library(dplyr)
library(dsbox)
library(fivethirtyeight)
library(gapminder)
library(gganimate)
ggplot(data= mydata) +
<GEOMFUNCTION>(mapping = aes(<MAPPINGS>))
ggplot(data = starwars) +
geom_point(mapping = aes(x = height, y = mass))
ggplot(data = starwars) +
geom_point(mapping = aes(x = height, y = mass)) +
geom_smooth(mapping = aes(x = height, y=mass), method='lm')
ggplot(data = starwars) +
geom_point(mapping = aes(x = height, y = mass)) +
geom_smooth(mapping = aes(x = height, y=mass), method='lm', se=FALSE) #remove standard error
ggplot(data = starwars, mapping = aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm', se=FALSE)
mycols= c('fair','white','light','brown','dark')
starwars$human_skincolor= ifelse(starwars$skin_color %in% mycols, 'human', 'non-human')
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point(aes(color= human_skincolor, shape= human_skincolor)) +
geom_smooth(method='lm', se=FALSE)
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~ human_skincolor)
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~ human_skincolor)
ggplot(data = starwars, aes(x = height, y = mass)) +
geom_point() +
geom_smooth(method='lm') +
facet_wrap(~ human_skincolor, scale="free_y")
ggplot(mydata, mapping=aes(<MAPPINGS>)) +
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor)) +
geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE)
mylab= 'Human character?'
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor)) +
geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color=mylab, shape=mylab, linetype=mylab) +
theme(legend.position = c(0.1,0.7))
mylab= 'Human character?'
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor)) +
geom_smooth(aes(linetype= human_skincolor), method='lm', se=TRUE) +
labs(x='Height(cm)', y='Mass (kg)', title='Starwars characters', color=mylab, shape=mylab, linetype=mylab) +
theme(legend.position = c(0.1,0.7)) +
coord_cartesian(ylim = c(0, 200))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(color='black') +
geom_smooth(method='lm', color='blue')
library(fivethirtyeight)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
round(cor(hc[,-1], use='complete.obs'),3)
hc$ginic= cut(hc$gini, breaks=c(0,0.43,0.45,0.47,1))
levels(hc$ginic)= c('Gini <= 0.43','0.43 < Gini <= 0.45','0.45 < Gini <= 0.47','Gini > 0.47')
hc$hsc= cut(hc$hs, breaks=c(0,0.83,0.86,0.9,1))
levels(hc$hsc)= c('hs <= 0.83', '0.83 < hs <= 0.86', '0.86 < hs <= 0.9', 'hs > 0.9')
boxplot(height ~ human_skincolor, data=starwars, names=c('No','Yes'), xlab='Human skin color')
ggplot(starwars, aes(x=human_skincolor, y=height)) +
geom_point()
ggplot(starwars, aes(x=human_skincolor, y=height)) +
geom_point() +
geom_violin()
ggplot(starwars, aes(x=height, fill=human_skincolor)) +
geom_histogram(alpha=0.2, color='black')  #alpha is the color transparency
ggplot(starwars, aes(x=height, color=human_skincolor)) +
geom_freqpoly()
ggplot(starwars, aes(x=height, color=human_skincolor)) +
geom_density()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_bin2d() +
scale_x_log10() + scale_y_log10()
ggplot(diamonds) +
geom_bar(aes(x = cut))
ggplot(diamonds) +
geom_bar(aes(x = cut, y=after_stat(prop), group=1))
ggplot(diamonds) +
geom_bar(aes(x = cut, y=after_stat(prop), group=1)) +
scale_y_continuous(labels = scales::percent_format()) +
labs(x='Diamond cut', y='Percentage') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=14,face="bold"))
ggplot(diamonds) +
geom_bar(aes(x = cut, fill = clarity))
ggplot(diamonds) +
geom_bar(aes(x = cut, fill = clarity), position = "dodge")
df= data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0.5", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
df
#| output-location: slide
ggplot(data=df, aes(x=dose, y=len, group=supp, color=supp)) +
geom_line()+
geom_point()
ggsave("mtcars.pdf")
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
png("mtcars.png")
png("mtcars.pdf")
print(p)
dev.off()
p= ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor))
#you can call ggsave() here
p + geom_smooth(aes(linetype= human_skincolor), method='lm', se=FALSE)
#call ggsave() again to save in a different file
ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor))
p= ggplot(data = starwars, aes(x = height, y = mass, color=human_skincolor)) +
geom_point(aes(shape=human_skincolor))
p + geom_smooth(aes(linetype= human_skincolor), method='lm', se=FALSE)
ggsave(p)
ggsave("p", plot=last_plot())
ggplot(mydata, ...) #code to produce the animation
p= ggplot(mydata, ...)  #code to produce the animation
gapminder
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=continent, size=pop), alpha = 0.7, show.legend = TRUE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x='GDP per capita', y='Life expectancy')
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=continent, size=pop), alpha = 0.7, show.legend = TRUE) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
#we add gganimate layers below
transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy')
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=continent, size=pop), alpha = 0.7, show.legend = TRUE) +
scale_size(range = c(2, 12)) +
scale_x_log10() + transition_time(year) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy')
ggplot(airquality, aes(Day, Temp)) +
geom_point(colour = 'steelblue') +
transition_states(Month) +
labs(title='Month: {closest_state}')
install.packages("gganimate")
library(gganimate)
ggplot(airquality, aes(Day, Temp)) +
geom_point(colour = 'steelblue') +
transition_states(Month) +
labs(title='Month: {closest_state}')
gini= as_tibble(read.csv("~/github/statcomp/datasets/gini.csv"))
![](figs/airquality_byday.gif)
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop.csv"))
gini= as_tibble(read.csv("~//Users/emmaescudero/Desktop.csv"))
gini= as_tibble(read.csv("~/Users/emmaescudero/Desktop.csv"))
gini= as_tibble(read.csv("~/Users/emmaescudero/Desktop/gini.csv"))
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
ggplot(data=gini, aes(x=Gini, y=time, group=supp, color=supp)) +
geom_line()+
geom_point()
supp
ggplot(data=gini, aes(x=Gini, y=time, group=supp, color=country_colors)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Gini, y=time, color=country_colors)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Gini, y=time, group=Entity, color=Entity)) +
geom_line()+
geom_point()
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
ggplot(data=gini, aes(x=Gini, y=time, group=Entity, color=Entity)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Year, y=gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()
ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()+
transition_reveal(Year)
animate(a)
a <- ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()+
transition_reveal(Year)
animate(a)
animate(a)
install.packages("gifski")
library(gifski)
gini= as_tibble(read.csv("/Users/emmaescudero/Desktop/gini.csv"))
gini
ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()
a <- ggplot(data=gini, aes(x=Year, y=Gini, group=Entity, color=Entity)) +
geom_line()+
geom_point()+
transition_reveal(Year)
animate(a)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(coefplot)
install.packages("coefplot")
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
install.packages("hexbin")
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
install.packages("multcomp")
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
library(tidyverse)
source('../code/routines.R') #recall to set path to directory
source('../code/routines.R') #recall to set path to directory
source('../code/routines.R') #recall to set path to directory
coefSummary
source("~/Documents/GitHub/statcomp/code/routines.R")
source("~/Documents/GitHub/statcomp/code/routines.R")
source("~/Documents/GitHub/statcomp/code/routines.R")
coefSummary
coefSummary(lmfit2)
source('../code/routines.R') #change path to directory where routines.R is stored
source("/Users/emmaescudero/Documents/GitHub/statcomp/code") #change path to directory where routines.R is stored
source(file= "/Users/emmaescudero/Documents/GitHub/statcomp/code") #change path to directory where routines.R is stored
source(file= "/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #change path to directory where routines.R is stored
source(file= "/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #change path to directory where routines.R is stored
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
library(tidyverse)
source('../code/routines.R') #recall to set path to directory
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50) +
geom_smooth(method='lm')
ggplot(diamonds, aes(cut, carat)) + geom_boxplot()
ggplot(diamonds, aes(color, carat)) + geom_boxplot()
ggplot(diamonds, aes(clarity, carat)) + geom_boxplot()
diamonds2= mutate(diamonds, lprice=log2(price), lcarat=log2(carat))
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_hex(bins = 50) +
geom_smooth(method='lm')
lmfit= lm(lprice ~ lcarat, data = diamonds2)
diamonds2$res= residuals(lmfit)
ggplot(diamonds2, aes(cut, res)) + geom_boxplot()
ggplot(diamonds2, aes(color, res)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, res)) + geom_boxplot()
lmfit2= lm(lprice ~ lcarat + cut + color + clarity, data=diamonds2)
summary(lmfit)$r.squared
summary(lmfit2)$r.squared
summary(lmfit2)
diamonds2$pred1= predict(lmfit)
diamonds2$pred2= predict(lmfit2)
diamonds2$res2= residuals(lmfit2)
ggplot(diamonds2, aes(x=pred1, y=lprice)) + geom_point() + geom_abline(color='blue')
ggplot(diamonds2, aes(x=pred2, y=lprice)) + geom_point() + geom_abline(color='blue')
summary(lmfit2)$coef
confint(lmfit2, level=0.95)
coefSummary
coefSummary(lmfit2)
coefplot(lmfit2, predictors="cut") #show only parameters with name including "cut"
ggplot(diamonds2, aes(x=pred2, y=res2)) + geom_point()
ggplot(diamonds2, aes(pred2, res2)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_point() +
geom_smooth(method='lm', col='blue') +
geom_smooth(col='red')
ggplot(diamonds2, aes(x=pred2, y=res2)) +
geom_boxplot(mapping = aes(group = cut_width(pred2, 0.2))) +
labs(x='Model prediction', y='Residuals')
library(ggpubr)
ggplot(diamonds2, aes(x=res)) +
geom_histogram(aes(y= ..density..)) +
stat_overlay_normal_density(linetype = "dashed") +
labs(x='Residuals')
hist(scale(diamonds2$res), xlab='Residuals', prob=TRUE, main='')
xseq= seq(-4,4,length=200)
lines(xseq, dnorm(xseq))
ggplot(diamonds2, aes(sample=scale(res))) +
geom_qq() +
geom_abline(slope=1, intercept=0)
qqnorm(scale(diamonds2$res))
abline(0,1)
unique(diamonds2$cut)
unique(diamonds2$color)
unique(diamonds2$clarity)
diamonds2$cut= factor(diamonds2$cut, ordered=FALSE)
diamonds2$color= factor(diamonds2$color, ordered=FALSE)
diamonds2$clarity= factor(diamonds2$clarity, ordered=FALSE)
unique(diamonds2$cut)
x= model.matrix(~ lcarat + cut + color + clarity, data=diamonds2)
x[1:5,]
unique(levels(diamonds2$cut))
lmfit2= lm(lprice ~ lcarat + cut + color + clarity, data=diamonds2)
b= cbind(summary(lmfit2)$coef[,c(1,4)], confint(lmfit2))
b[,-2]= round(b[,-2],3)
b
b[,-2]= 2^b[,-2]
b[,-2]= round(b[,-2],3)
b[-1,]
mygrid= data_grid(diamonds2, cut, color, clarity, .model=lmfit2)
mygrid
lmpred2= add_predictions(mygrid, model=lmfit2)
lmpred2
ggplot(lmpred2, aes(x=clarity, y=pred, color=color)) +
geom_point() +
facet_wrap(~ cut) +
labs(y='log2 (price)')
coefSummary(lmfit2)
C= matrix(0,nrow=1, ncol=length(coef(lmfit2)))
C[1,5]= -1; C[1,6]=1
C[1,1:10] #show first 10 columns
PvsI= glht(lmfit2, C)
summary(PvsI)
confint(PvsI)
bhat= matrix(coef(lmfit2), ncol=1)
V= vcov(lmfit2)
sqrt(diag(V)) #SE's for beta's (compare to summary(lmfit2))
dhat= C %*% bhat
se= sqrt(C %*% V %*% t(C))
se
dhat.ci= c(dhat, dhat - 1.96 * se, dhat + 1.96 * se)
round(dhat.ci, 4)
#| code-fold: true
ggplot(diamonds2, aes(lcarat, lprice, color=cut)) +
geom_point() +
geom_smooth(method='lm', se=FALSE)
lmfit3= lm(lprice ~ lcarat + cut + lcarat:cut, data=diamonds2)
coefSummary(lmfit3)
lmfit4= lm(lprice ~ lcarat + cut, data=diamonds2)
anova(lmfit4, lmfit3)
lmfull= lm(lprice ~ lcarat + cut + color + clarity + lcarat:cut + lcarat:color + lcarat:clarity, data=diamonds2)
lmdrop1= lm(lprice ~ lcarat + cut + color + clarity + lcarat:color + lcarat:clarity, data=diamonds2)
pvalue1= anova(lmdrop1, lmfull)[['Pr(>F)']][2]
lmdrop2= lm(lprice ~ lcarat + cut + color + clarity + lcarat:cut + lcarat:clarity, data=diamonds2)
pvalue2= anova(lmdrop2, lmfull)[['Pr(>F)']][2]
lmdrop3= lm(lprice ~ lcarat + cut + color + clarity + lcarat:cut + lcarat:color, data=diamonds2)
pvalue3= anova(lmdrop3, lmfull)[['Pr(>F)']][2]
c(pvalue1, pvalue2, pvalue3)
summary(lmfit2)$r.squared
summary(lmfull)$r.squared
diamonds2$predfull= predict(lmfull)
cor(diamonds2$pred2, diamonds2$predfull)
s= coefSummary(lmfit3)
sel= grep("lcarat:",s$Parameter)
knitr::kable(s[sel,])
s= coefSummary(lmfull)
sel= grep("lcarat:",s$Parameter)
knitr::kable(s[sel,])
multiplot(lmfull, lmfit3, intercept=FALSE)
library(gapminder)
gapminder
ggplot(gapminder, aes(year, lifeExp, group = country)) +
geom_line() + facet_wrap(~ continent)
gm_country= group_by(gapminder, country, continent) %>% nest()
gm_country
fitmodel= function(df) {
fit= lm(lifeExp ~ year, data=df)
ans= c(coef(fit), summary(fit)$r.squared)
names(ans)= c('b0','b1','R2')
return(ans)
}
coef_gm = map_df(gm_country$data, fitmodel)
coef_gm = cbind(gm_country, coef_gm)
coef_gm
ggplot(coef_gm, aes(x=R2)) + geom_histogram()
filter(coef_gm, R2 < 0.5) %>% dplyr::select(country, continent, R2)
```
source("/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #recall to set path to directory
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(fivethirtyeight)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
View(hc)
lmfit <- lm(hatecrimes_fbi ~ votes_trump + gini + hs, data = hc)
lmfit
confint(lmfit, level = 0.95)
coefSummary(lmfit)
coefSummary(lmfit)
library(fivethirtyeight)
library(coefplot)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
coefSummary(lmfit)
res <- lmfit$assign
res
res <- lmfit$residuals
res
pred <- predict(lmfit)
ggplot(diamonds2, aes(pred, res)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(hc, aes(pred, res)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(hc, aes(x=pred, y=res)) +
geom_boxplot(mapping = aes(group = cut_width(pred2, 0.2))) +
labs(x='Model prediction', y='Residuals')
ggplot(hc, aes(x=pred, y=res)) +
geom_boxplot(mapping = aes(group = cut_width(pred, 0.2))) +
labs(x='Model prediction', y='Residuals')
library(ggpubr)
ggplot(hc, aes(x=res)) +
geom_histogram(aes(y= ..density..)) +
stat_overlay_normal_density(linetype = "dashed") +
labs(x='Residuals')
library(fivethirtyeight)
library(coefplot)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
library(fivethirtyeight)
library(coefplot)
sel= c('state_abbrev','avg_hatecrimes_per_100k_fbi','share_vote_trump','gini_index','share_pop_hs')
hc= hate_crimes[,sel]
names(hc)= c('state','hatecrimes_fbi','votes_trump','gini','hs')
hc= filter(hc, !is.na(hatecrimes_fbi)) #outcome must be non-missing
coefSummary(lmfit)
coefSummary(lmfit)
