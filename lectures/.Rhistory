knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
unique(diamonds2$cut)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
library(tidyverse)
source("/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #recall to set path to directory
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50) +
geom_smooth(method='lm')
ggplot(diamonds, aes(cut, carat)) + geom_boxplot()
ggplot(diamonds, aes(color, carat)) + geom_boxplot()
ggplot(diamonds, aes(clarity, carat)) + geom_boxplot()
diamonds2= mutate(diamonds, lprice=log2(price), lcarat=log2(carat))
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_hex(bins = 50) +
geom_smooth(method='lm')
lmfit= lm(lprice ~ lcarat, data = diamonds2)
diamonds2$res= residuals(lmfit)
ggplot(diamonds2, aes(cut, res)) + geom_boxplot()
ggplot(diamonds2, aes(color, res)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, res)) + geom_boxplot()
lmfit2= lm(lprice ~ lcarat + cut + color + clarity, data=diamonds2)
summary(lmfit)$r.squared
summary(lmfit2)$r.squared
summary(lmfit2)
diamonds2$pred1= predict(lmfit)
diamonds2$pred2= predict(lmfit2)
diamonds2$res2= residuals(lmfit2)
ggplot(diamonds2, aes(x=pred1, y=lprice)) + geom_point() + geom_abline(color='blue')
ggplot(diamonds2, aes(x=pred2, y=lprice)) + geom_point() + geom_abline(color='blue')
summary(lmfit2)$coef
confint(lmfit2, level=0.95)
coefSummary
coefSummary(lmfit2)
coefplot(lmfit2, predictors="cut") #show only parameters with name including "cut"
ggplot(diamonds2, aes(x=pred2, y=res2)) + geom_point()
ggplot(diamonds2, aes(pred2, res2)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_point() +
geom_smooth(method='lm', col='blue') +
geom_smooth(col='red')
ggplot(diamonds2, aes(x=pred2, y=res2)) +
geom_boxplot(mapping = aes(group = cut_width(pred2, 0.2))) +
labs(x='Model prediction', y='Residuals')
library(ggpubr)
ggplot(diamonds2, aes(x=res)) +
geom_histogram(aes(y= ..density..)) +
stat_overlay_normal_density(linetype = "dashed") +
labs(x='Residuals')
hist(scale(diamonds2$res), xlab='Residuals', prob=TRUE, main='')
xseq= seq(-4,4,length=200)
lines(xseq, dnorm(xseq))
ggplot(diamonds2, aes(sample=scale(res))) +
geom_qq() +
geom_abline(slope=1, intercept=0)
qqnorm(scale(diamonds2$res))
abline(0,1)
unique(diamonds2$cut)
unique(diamonds2$color)
unique(diamonds2$clarity)
diamonds2$cut= factor(diamonds2$cut, ordered=FALSE)   #create a factor with this variables which is not ordered.
diamonds2$color= factor(diamonds2$color, ordered=FALSE)
diamonds2$clarity= factor(diamonds2$clarity, ordered=FALSE)
unique(diamonds2$cut)
x= model.matrix(~ lcarat + cut + color + clarity, data=diamonds2) #we model the matrix and give it the model regression formula. This x now contains the x-matrix. First all the variables are coding for cut, then for color... If you get 0 in all this columns you get that is the reference. In this case Fair is the reference category.
x[1:5,]
unique(levels(diamonds2$cut))
x1= rnorm(100); x2= rnorm(100); x3= rnorm(100)
y= rnorm(100, x1 + x2/2, sd=1)  #y = x1 + x2/2 + e, e ~ N(0,1)
fit1= lm(y ~ x1 + x2 + x3 + x1:x2 + x1:x3 + x2:x3)
fit2= lm(y ~ x1*x2 + x1*x3 + x2*x3) #with * you can drop the additive terms
fit3= lm(y ~ (x1 + x2 + x3)^2) #^2 adds main effects + interactions in one go
fit3
fitmodel= function(df) {
fit= lm(lifeExp ~ year, data=df)
ans= c(coef(fit), summary(fit)$r.squared)
names(ans)= c('b0','b1','R2')
return(ans)
}
filter(coef_gm, R2 < 0.5) %>% dplyr::select(country, continent, R2)
filter(coef_gm, R2 < 0.5) %>% dplyr::select(country, continent, R2)
poorfit= filter(coef_gmu, R2 < 0.25)
coef_gm = map_df(gm_country$data, fitmodel)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
library(tidyverse)
source("/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #recall to set path to directory
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(color, price)) + geom_boxplot()
ggplot(diamonds, aes(clarity, price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) +
geom_hex(bins = 50) +
geom_smooth(method='lm')
ggplot(diamonds, aes(cut, carat)) + geom_boxplot()
ggplot(diamonds, aes(color, carat)) + geom_boxplot()
ggplot(diamonds, aes(clarity, carat)) + geom_boxplot()
diamonds2= mutate(diamonds, lprice=log2(price), lcarat=log2(carat))
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_hex(bins = 50) +
geom_smooth(method='lm')
lmfit= lm(lprice ~ lcarat, data = diamonds2)
diamonds2$res= residuals(lmfit)
ggplot(diamonds2, aes(cut, res)) + geom_boxplot()
ggplot(diamonds2, aes(color, res)) + geom_boxplot()
ggplot(diamonds2, aes(clarity, res)) + geom_boxplot()
lmfit2= lm(lprice ~ lcarat + cut + color + clarity, data=diamonds2)
summary(lmfit)$r.squared
summary(lmfit2)$r.squared
summary(lmfit2)
diamonds2$pred1= predict(lmfit)
diamonds2$pred2= predict(lmfit2)
diamonds2$res2= residuals(lmfit2)
ggplot(diamonds2, aes(x=pred1, y=lprice)) + geom_point() + geom_abline(color='blue')
ggplot(diamonds2, aes(x=pred2, y=lprice)) + geom_point() + geom_abline(color='blue')
summary(lmfit2)$coef
confint(lmfit2, level=0.95)
coefSummary
coefSummary(lmfit2)
coefplot(lmfit2, predictors="cut") #show only parameters with name including "cut"
ggplot(diamonds2, aes(x=pred2, y=res2)) + geom_point()
ggplot(diamonds2, aes(pred2, res2)) +
geom_point() +
geom_smooth() +
geom_abline(slope=0, intercept=0, col='gray') +
labs(x='Model prediction', y='Residuals')
ggplot(diamonds2, aes(lcarat, lprice)) +
geom_point() +
geom_smooth(method='lm', col='blue') +
geom_smooth(col='red')
ggplot(diamonds2, aes(x=pred2, y=res2)) +
geom_boxplot(mapping = aes(group = cut_width(pred2, 0.2))) +
labs(x='Model prediction', y='Residuals')
library(ggpubr)
ggplot(diamonds2, aes(x=res)) +
geom_histogram(aes(y= ..density..)) +
stat_overlay_normal_density(linetype = "dashed") +
labs(x='Residuals')
hist(scale(diamonds2$res), xlab='Residuals', prob=TRUE, main='')
xseq= seq(-4,4,length=200)
lines(xseq, dnorm(xseq))
ggplot(diamonds2, aes(sample=scale(res))) +
geom_qq() +
geom_abline(slope=1, intercept=0)
qqnorm(scale(diamonds2$res))
abline(0,1)
unique(diamonds2$cut)
unique(diamonds2$color)
unique(diamonds2$clarity)
diamonds2$cut= factor(diamonds2$cut, ordered=FALSE)   #create a factor with this variables which is not ordered.
diamonds2$color= factor(diamonds2$color, ordered=FALSE)
diamonds2$clarity= factor(diamonds2$clarity, ordered=FALSE)
unique(diamonds2$cut)
x= model.matrix(~ lcarat + cut + color + clarity, data=diamonds2) #we model the matrix and give it the model regression formula. This x now contains the x-matrix. First all the variables are coding for cut, then for color... If you get 0 in all this columns you get that is the reference. In this case Fair is the reference category.
x[1:5,]
unique(levels(diamonds2$cut))
lmfit2= lm(lprice ~ lcarat + cut + color + clarity, data=diamonds2)
b= cbind(summary(lmfit2)$coef[,c(1,4)], confint(lmfit2))
b[,-2]= round(b[,-2],3)
b
b[,-2]= 2^b[,-2]
b[,-2]= round(b[,-2],3)
b[-1,]   # The price is increasing by 8% in the case of cutGood as the value given is 1.083.
mygrid= data_grid(diamonds2, cut, color, clarity, .model=lmfit2)
mygrid
lmpred2= add_predictions(mygrid, model=lmfit2)
lmpred2
ggplot(lmpred2, aes(x=clarity, y=pred, color=color)) +
geom_point() +
facet_wrap(~ cut) +
labs(y='log2 (price)')
coefSummary(lmfit2)
C= matrix(0,nrow=1, ncol=length(coef(lmfit2)))
C[1,5]= -1; C[1,6]=1
C[1,1:10] #show first 10 columns
PvsI= glht(lmfit2, C)
summary(PvsI)
confint(PvsI)
bhat= matrix(coef(lmfit2), ncol=1)
V= vcov(lmfit2)
sqrt(diag(V)) #SE's for beta's (compare to summary(lmfit2))
dhat= C %*% bhat
se= sqrt(C %*% V %*% t(C))
se
dhat.ci= c(dhat, dhat - 1.96 * se, dhat + 1.96 * se)
round(dhat.ci, 4)
#| code-fold: true
ggplot(diamonds2, aes(lcarat, lprice, color=cut)) +  #the effect of one variable may depend of the value of another variable
geom_point() +
geom_smooth(method='lm', se=FALSE)
lmfit3= lm(lprice ~ lcarat + cut + lcarat:cut, data=diamonds2)
coefSummary(lmfit3)  #0,241 is the difference between the slope. This number tells us the large that is the slope related to the other lcarat cateories.
lmfit4= lm(lprice ~ lcarat + cut, data=diamonds2)
anova(lmfit4, lmfit3)
lmfull= lm(lprice ~ lcarat + cut + color + clarity + lcarat:cut + lcarat:color + lcarat:clarity, data=diamonds2)
lmdrop1= lm(lprice ~ lcarat + cut + color + clarity + lcarat:color + lcarat:clarity, data=diamonds2)
pvalue1= anova(lmdrop1, lmfull)[['Pr(>F)']][2]
lmdrop2= lm(lprice ~ lcarat + cut + color + clarity + lcarat:cut + lcarat:clarity, data=diamonds2)
pvalue2= anova(lmdrop2, lmfull)[['Pr(>F)']][2]
lmdrop3= lm(lprice ~ lcarat + cut + color + clarity + lcarat:cut + lcarat:color, data=diamonds2)
pvalue3= anova(lmdrop3, lmfull)[['Pr(>F)']][2]
c(pvalue1, pvalue2, pvalue3)
summary(lmfit2)$r.squared
summary(lmfull)$r.squared
diamonds2$predfull= predict(lmfull)
cor(diamonds2$pred2, diamonds2$predfull)
s= coefSummary(lmfit3)
sel= grep("lcarat:",s$Parameter)
knitr::kable(s[sel,])
s= coefSummary(lmfull)
sel= grep("lcarat:",s$Parameter)
knitr::kable(s[sel,])
multiplot(lmfull, lmfit3, intercept=FALSE)
x1= rnorm(100); x2= rnorm(100); x3= rnorm(100)
y= rnorm(100, x1 + x2/2, sd=1)  #y = x1 + x2/2 + e, e ~ N(0,1)
fit1= lm(y ~ x1 + x2 + x3 + x1:x2 + x1:x3 + x2:x3)
fit2= lm(y ~ x1*x2 + x1*x3 + x2*x3) #with * you can drop the additive terms
fit3= lm(y ~ (x1 + x2 + x3)^2) #^2 adds main effects + interactions in one go
fit3
library(gapminder)
gapminder
ggplot(gapminder, aes(year, lifeExp, group = country)) +
geom_line() + facet_wrap(~ continent)  #In most countries there has been an increase. We must consider adding a regression line between the country and the time (year).
gm_country= group_by(gapminder, country, continent) %>% nest()
gm_country
fitmodel= function(df) {
fit= lm(lifeExp ~ year, data=df)
ans= c(coef(fit), summary(fit)$r.squared)
names(ans)= c('b0','b1','R2')
return(ans)
}
coef_gm = map_df(gm_country$data, fitmodel)
coef_gm = cbind(gm_country, coef_gm)
coef_gm
coef_gmu= unnest(coef_gm, cols=names(coef_gm))  #unnest & keep all columns
coef_gmu$pred= coef_gmu$b0 + coef_gmu$b1 * coef_gmu$year
coef_gmu
```
#dplyr:filter and dplyr::select ensures using functions (filter,select) from package dplyr
dplyr::filter(coef_gm, R2 < 0.5) |> dplyr::select(country, continent, R2)
coef_gmu= unnest(coef_gm, cols=names(coef_gm))  #unnest & keep all columns
coef_gmu$pred= coef_gmu$b0 + coef_gmu$b1 * coef_gmu$year
coef_gmu
```
coef_gmu= unnest(coef_gm, cols=names(coef_gm))  #unnest & keep all columns
coef_gmu$pred= coef_gmu$b0 + coef_gmu$b1 * coef_gmu$year
coef_gmu
```
coef_gmu= unnest(coef_gm, cols=names(coef_gm))  #unnest & keep all columns
coef_gmu$pred= coef_gmu$b0 + coef_gmu$b1 * coef_gmu$year
coef_gmu
```
coef_gmu= unnest(coef_gm, cols=names(coef_gm))  #unnest & keep all columns
coef_gmu$pred= coef_gmu$b0 + coef_gmu$b1 * coef_gmu$year
coef_gmu
poorfit= filter(coef_gmu, R2 < 0.25)
ggplot(poorfit) +
geom_line(aes(year, lifeExp)) +
geom_line(aes(year, pred), col='red') +
facet_wrap(~ country)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
options(repos = list(CRAN="http://cran.rstudio.com/"))
library(coefplot)
library(ggpubr)
library(gapminder)
library(hexbin)
library(modelr)
library(multcomp)
library(tidyverse)
source("/Users/emmaescudero/Documents/GitHub/statcomp/code/routines.R") #recall to set path to directory
source("/Users/emmaescudero/Documents/modern/code/routines.R")
gm3 = gapminder |>
filter(country %in% c("France", "Italy", "Spain")) |>
transform(country = factor(country), years_since_1952 = year - 1952)
fit1 <- lm(lifeExp ~ years_since_1952 + country, data=gm3)
coefSummary(fit1)
gm3 = gapminder |>
filter(country %in% c("France", "Italy", "Spain")) |>
transform(country = factor(country), years_since_1952 = year - 1952)
fit1 <- lm(lifeExp ~ years_since_1952 + country, data=gm3)
coefSummary(fit1)
levels(gm3$country)
contrasts(gm3$country)
contr.sum(levels(gm3$country))
gm3$country0= gm3$country #create new variable
c0= contr.sum(levels(gm3$country0)) #tell contr.sum the factor levels
colnames(c0)= c('France','Italy')   #set column names to facilitate interpreting coef.
contrasts(gm3$country0) = c0
fit2= lm(lifeExp ~ years_since_1952 + country0, data=gm3)
coefSummary(fit2)
contrasts(gm3$country)
contr.sum(levels(gm3$country))   #check what the sum-to-zero codes look like
